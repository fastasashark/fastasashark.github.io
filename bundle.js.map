{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://sass/./src/index.js"],"sourcesContent":["import './styles.scss';\n\nlet alphabet = [\n    'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'\n];\n\nlet timeout = 500;\nlet pix = 15;\nlet m = 100;\nlet n = 60;\nlet number = 1000;\n\nlet empty_cell = {\n    width: pix,\n    height: pix,\n    color: '#fff'\n};\n\nlet border_cell = {\n    width: pix,\n    height: pix,\n    color: '#000'\n};\n\nlet map = Array.from({length: m * n}, (e, i) => 0);\n\nlet cells = [];\n\nfor (let c = 0; c < number; c++) {\n    let name = alphabet[Math.round(Math.random() * 25)] + alphabet[Math.round(Math.random() * 25)] + alphabet[Math.round(Math.random() * 25)];\n\n    map[Math.round(Math.random() * m * n)] = name;\n\n    let _cell =  {\n        width: pix,\n        height: pix,\n        color: \"rgb(\" + Math.round(Math.random() * 255) + \", \" + Math.round(Math.random() * 255) + \", \" + Math.round(Math.random() * 255) + \")\"\n    };\n    cells[name] = _cell;\n}\n\ndocument.querySelector('#program').style.width = m * pix;\ndocument.querySelector('#program').style.height = n * pix;\n\nfunction createSquare(cell) {\n    let cellEl = document.createElement(\"div\");\n\n    cellEl.style.width = cell.width;\n    cellEl.style.height = cell.height;\n    cellEl.style.display = \"inline-block\";\n\n    //cellEl.innerHTML = cell.name;\n    cellEl.style.backgroundColor = cell.color;\n    document.querySelector('#program').appendChild(cellEl);\n}\n\nfunction init() {\n    document.querySelector('#program').innerHTML = '';\n    let cell_in_border = false;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            let index = i * m + j;\n            let cell_name = map[index];\n            let cell = empty_cell;\n\n            if (i == 0 || i == n - 1 || j == 0 || j == m - 1) {\n                map[index] = 1;\n                cell = border_cell;\n            }\n\n            if (cell_name != 0 && cell_name != 1) {\n                cell = cells[cell_name];\n                let direction = Object.hasOwn(cell, 'direction') ? cell.direction : Math.round(Math.random() * 3);\n                cell.direction = direction;\n\n                if (i == 0) {\n                    map[(i + 1) * m + j] = cell_name;\n                    cell_in_border = true;\n                }\n                if (i == n - 1) {\n                    map[(i - 1) * m + j] = cell_name;\n                    cell_in_border = true;\n                }\n                if (j == 0) {\n                    map[i * m + j + 1] = cell_name;\n                    cell_in_border = true;\n                }\n                if (j == m - 1) {\n                    map[i * m + j - 1] = cell_name;\n                    cell_in_border = true;\n                }\n            }\n\n            createSquare(cell);\n        }\n    }\n    if (cell_in_border) init();\n}\n\nfunction render() {\n    document.querySelector('#program').innerHTML = '';\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            let index = i * m + j;\n\n            let cell_name = map[index];\n            let cell = empty_cell;\n\n            if (cell_name == 1) {\n                cell = border_cell;\n            }\n\n            if (cell_name != 0 && cell_name != 1) {\n                cell = cells[cell_name];\n            }\n            createSquare(cell);\n        }\n    }\n}\n\nfunction run() {\n    let new_cells = [];\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            let index = i * m + j;\n            let cell_name = map[index];\n\n            if (cell_name != 0 && cell_name != 1) {\n                let cell = cells[cell_name];\n                let direction = Object.hasOwn(cell, 'direction') ? cell.direction : Math.round(Math.random() * 3);\n\n                switch(direction) {\n                    case 0://N\n                        if (i - 1 != 0) {\n                            index = (i - 1) * m + j;\n                        }\n                        else {\n                            index = (i + 1) * m + j;\n                            direction = 2;\n                        }\n                        break;\n                    case 1://E\n                        if (j + 1 != m - 1) {\n                            index = i * m + (j + 1);\n                        }\n                        else {\n                            index = i * m + (j - 1);\n                            direction = 3;\n                        }\n                        break;\n                    case 2://S\n                        if (i + 1 != n - 1) {\n                            index = (i + 1) * m + j;\n                        }\n                        else {\n                            index = (i - 1) * m + j;\n                            direction = 0;\n                        }\n                        break;\n                    case 3://W\n                        if (j - 1 != 0) {\n                            index = i * m + (j - 1);\n                        }\n                        else {\n                            index = i * m + (j + 1);\n                            direction = 1;\n                        }\n                        break;\n                }\n\n\n                cell.direction = direction;\n                cells[cell_name] = cell;\n                new_cells[index] = cell_name;\n\n            }\n            \n        }\n    }\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            let index = i * m + j;\n\n            if (index in new_cells) {\n                map[index] = new_cells[index]\n            }\n            else {\n                map[index] = (i == 0 || i == n - 1 || j == 0 || j == m - 1) ? 1 : 0;\n            }\n        }\n    }\n}\n\ninit();\nsetInterval(function() {\n    run();\n    render();\n\n            \n}, timeout);"],"names":["alphabet","pix","m","n","empty_cell","width","height","color","border_cell","map","Array","from","length","e","i","cells","c","name","Math","round","random","_cell","createSquare","cell","cellEl","document","createElement","style","display","backgroundColor","querySelector","appendChild","init","innerHTML","cell_in_border","j","index","cell_name","direction","Object","hasOwn","setInterval","new_cells","run","render"],"sourceRoot":""}